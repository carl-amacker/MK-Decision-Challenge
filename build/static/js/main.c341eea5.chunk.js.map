{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","validateForm","state","nameValid","emailValid","messageValid","setState","formValid","updateName","name","validateName","length","updateEmail","email","validateEmail","test","updateMessage","message","validateMessage","SubmitForm","a","dataJSON","Math","floor","random","JSON","stringify","axios","post","SendSES","alert","emailJSON","className","TextField","fullWidth","id","label","variant","margin","required","value","this","onChange","event","target","type","multiline","rows","defaultValue","Button","onClick","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c341eea5.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from \"axios\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport './FormStyle.css';\r\n\r\nexport default class Form extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name:\"\",\r\n            email: \"\",\r\n            message: \"\",\r\n            nameValid: false,\r\n            emailValid: false,\r\n            messageValid: false,\r\n            formValid: false\r\n        };\r\n    }\r\n\r\n    validateForm = () => {\r\n        const {nameValid, emailValid, messageValid} = this.state;\r\n        this.setState({\r\n            formValid: nameValid && emailValid && messageValid\r\n        })\r\n    }\r\n\r\n    updateName = (name) => {\r\n        this.setState({name}, this.validateName)\r\n    }\r\n\r\n    validateName = () => {\r\n        const {name} = this.state;\r\n        let nameValid = true;\r\n\r\n        if (name.length < 1) {\r\n            nameValid = false;\r\n        }\r\n\r\n        this.setState({nameValid}, this.validateForm)\r\n    }\r\n\r\n    updateEmail = (email) => {\r\n        this.setState({email}, this.validateEmail)\r\n    }\r\n\r\n    validateEmail = () => {\r\n        const {email} = this.state;\r\n        let emailValid = true;\r\n\r\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\r\n            emailValid = false;\r\n        }\r\n\r\n        this.setState({emailValid}, this.validateForm)\r\n    }\r\n\r\n    updateMessage = (message) => {\r\n        this.setState({message}, this.validateMessage)\r\n    }\r\n\r\n    validateMessage = () => {\r\n        const {message} = this.state;\r\n        let messageValid = true;\r\n\r\n        if (message.length < 1) {\r\n            messageValid = false;\r\n        }\r\n\r\n        this.setState({messageValid}, this.validateForm)\r\n    }\r\n\r\n    SubmitForm = async (message, email, name) => {\r\n        try {\r\n            message = this.state.message;\r\n            name = this.state.name;\r\n            email = this.state.email;\r\n\r\n            var dataJSON = {\r\n                \"Item\": {\r\n                    \"id\": (1 + Math.floor((Math.random() * 100))),\r\n                    \"name\": name,\r\n                    \"email\": email,\r\n                    \"message\": message\r\n                }\r\n            };\r\n\r\n            dataJSON = JSON.stringify(dataJSON);\r\n            // console.log(\"sending info to database:\");\r\n            // console.log(dataJSON);\r\n            await axios.post('https://7ly0o5hj1l.execute-api.us-east-2.amazonaws.com/stage001/MKD-Request-Test', dataJSON);\r\n\r\n            this.SendSES(email, message, name);\r\n\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }\r\n\r\n    SendSES = async (email, message, name) => {\r\n        try {\r\n            var emailJSON = {\r\n                \"email\": email,\r\n                \"name\": name,\r\n                \"message\": message\r\n            };\r\n\r\n            emailJSON = JSON.stringify(emailJSON);\r\n            // console.log(\"sending email with info:\");\r\n            // console.log(emailJSON);\r\n            await axios.post('https://7ly0o5hj1l.execute-api.us-east-2.amazonaws.com/stage001/MKDecision-Challenge-Email-Function', emailJSON);\r\n\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h2> MK Decision Challenge </h2>\r\n                <form className=\"Form\">\r\n                    <TextField\r\n                        fullWidth\r\n                        id=\"Name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        value={this.state.name}\r\n                        onChange={event => this.updateName(event.target.value)}\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        id=\"Email\"\r\n                        label=\"Email\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        type=\"email\"\r\n                        required\r\n                        value={this.state.email}\r\n                        onChange={event => this.updateEmail(event.target.value)}\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        multiline\r\n                        rows=\"4\"\r\n                        id=\"Message\"\r\n                        label=\"Message\"\r\n                        defaultValue=\"\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        value={this.state.message}\r\n                        onChange={event => this.updateMessage(event.target.value)}\r\n                    />\r\n                    <Button variant=\"outlined\" onClick={this.SubmitForm} disabled={!this.state.formValid} >Submit</Button>\r\n                </form>\r\n                <h6> Carl Amacker</h6>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from 'react';\r\nimport './App.css';\r\nimport Form from './Form'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Form />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}