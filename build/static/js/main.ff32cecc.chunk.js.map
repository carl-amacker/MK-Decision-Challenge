{"version":3,"sources":["ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","SubmitForm","message","email","name","a","state","dataJSON","Math","floor","random","JSON","stringify","console","log","axios","post","SendSES","alert","emailJSON","className","TextField","fullWidth","id","label","variant","margin","value","this","onChange","event","setState","target","type","multiline","rows","defaultValue","Button","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"wVAKqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,WATmB,uCASN,WAAOC,EAASC,EAAOC,GAAvB,eAAAC,EAAA,sEAELH,EAAU,EAAKI,MAAMJ,QACrBE,EAAO,EAAKE,MAAMF,KAClBD,EAAQ,EAAKG,MAAMH,MAEfI,EAAW,CACX,UAAa,SACb,UAAa,iCACb,QAAW,CACP,KAAQ,CACJ,GAAO,EAAIC,KAAKC,MAAuB,IAAhBD,KAAKE,UAC5B,KAAQN,EACR,MAASD,EACT,QAAWD,KAKvBK,EAAWI,KAAKC,UAAUL,GAC1BM,QAAQC,IAAI,6BACZD,QAAQC,IAAIP,GArBP,UAsBCQ,IAAMC,KAAK,mFAAoFT,GAtBhG,QAwBL,EAAKU,QAAQd,EAAOD,EAASE,GAxBxB,kDA2BLc,MAAM,EAAD,IA3BA,0DATM,4DAwCnBD,QAxCmB,uCAwCT,WAAOd,EAAOD,EAASE,GAAvB,eAAAC,EAAA,sEAEEc,EAAY,CACZ,MAAShB,EACT,KAAQC,EACR,QAAWF,GAGfiB,EAAYR,KAAKC,UAAUO,GAC3BN,QAAQC,IAAI,4BACZD,QAAQC,IAAIK,GAVV,SAWIJ,IAAMC,KAAK,sGAAuGG,GAXtH,uDAcFD,MAAM,EAAD,IAdH,yDAxCS,0DAEf,EAAKZ,MAAQ,CACTF,KAAK,GACLD,MAAO,GACPD,QAAS,IALE,E,qDA2DT,IAAD,OAEL,OACI,6BACI,0BAAMkB,UAAU,QACZ,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,GAAG,OACHC,MAAM,OACNC,QAAQ,WACRC,OAAO,SACPC,MAAOC,KAAKtB,MAAMF,KAClByB,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAE3B,KAAM0B,EAAME,OAAOL,WAE1D,kBAACN,EAAA,EAAD,CACIC,WAAS,EACTC,GAAG,QACHC,MAAM,QACNC,QAAQ,WACRC,OAAO,SACPO,KAAK,QACLN,MAAOC,KAAKtB,MAAMH,MAClB0B,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAE5B,MAAO2B,EAAME,OAAOL,WAE3D,kBAACN,EAAA,EAAD,CACIC,WAAS,EACTY,WAAS,EACTC,KAAK,IACLZ,GAAG,UACHC,MAAM,UACNY,aAAa,GACbV,OAAO,SACPD,QAAQ,WACRE,MAAOC,KAAKtB,MAAMJ,QAClB2B,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAE7B,QAAS4B,EAAME,OAAOL,WAE7D,kBAACU,EAAA,EAAD,CAAQZ,QAAQ,WAAWa,QAASV,KAAK3B,YAAzC,gB,GAhGqBsC,IAAMC,WCShCC,MAVf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMzD,c","file":"static/js/main.ff32cecc.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from \"axios\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class ContactForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name:\"\",\r\n            email: \"\",\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    SubmitForm = async (message, email, name) => {\r\n        try {\r\n            message = this.state.message;\r\n            name = this.state.name;\r\n            email = this.state.email;\r\n\r\n            var dataJSON = {\r\n                \"operation\": \"create\",\r\n                \"tableName\": \"MK-Decision-Challenge-Messages\",\r\n                \"payload\": {\r\n                    \"Item\": {\r\n                        \"id\": (1 + Math.floor((Math.random() * 100))),\r\n                        \"name\": name,\r\n                        \"email\": email,\r\n                        \"message\": message\r\n                    }\r\n                }\r\n            };\r\n\r\n            dataJSON = JSON.stringify(dataJSON);\r\n            console.log(\"sending info to database:\");\r\n            console.log(dataJSON);\r\n            await axios.post('https://7ly0o5hj1l.execute-api.us-east-2.amazonaws.com/stage001/MKD-Request-Test', dataJSON);\r\n\r\n            this.SendSES(email, message, name);\r\n\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }\r\n\r\n    SendSES = async (email, message, name) => {\r\n        try {\r\n            var emailJSON = {\r\n                \"email\": email,\r\n                \"name\": name,\r\n                \"message\": message\r\n            };\r\n\r\n            emailJSON = JSON.stringify(emailJSON);\r\n            console.log(\"sending email with info:\");\r\n            console.log(emailJSON);\r\n            await axios.post('https://7ly0o5hj1l.execute-api.us-east-2.amazonaws.com/stage001/MKDecision-Challenge-Email-Function', emailJSON);\r\n\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <form className=\"form\">\r\n                    <TextField\r\n                        fullWidth\r\n                        id=\"Name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        value={this.state.name}\r\n                        onChange={event => this.setState({ name: event.target.value })}\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        id=\"Email\"\r\n                        label=\"Email\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        type=\"email\"\r\n                        value={this.state.email}\r\n                        onChange={event => this.setState({ email: event.target.value })}\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        multiline\r\n                        rows=\"4\"\r\n                        id=\"Message\"\r\n                        label=\"Message\"\r\n                        defaultValue=\"\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.message}\r\n                        onChange={event => this.setState({ message: event.target.value })}\r\n                    />\r\n                    <Button variant=\"outlined\" onClick={this.SubmitForm} >Submit</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from 'react';\nimport './App.css';\nimport ContactForm from './ContactForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ContactForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}